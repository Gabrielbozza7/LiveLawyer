# ios/Podfile

require File.join(File.dirname(`node --print "require.resolve('expo/package.json')"`), "scripts/autolinking")
require File.join(File.dirname(`node --print "require.resolve('react-native/package.json')"`), "scripts/react_native_pods")

require 'json'
podfile_properties = JSON.parse(File.read(File.join(__dir__, 'Podfile.properties.json'))) rescue {}

# New-Arch toggle, etc.
ENV['RCT_NEW_ARCH_ENABLED'] = podfile_properties['newArchEnabled'] == 'true' ? '1' : '0'
ENV['EX_DEV_CLIENT_NETWORK_INSPECTOR'] = podfile_properties['EX_DEV_CLIENT_NETWORK_INSPECTOR']

platform :ios, podfile_properties['ios.deploymentTarget'] || '15.1'
install! 'cocoapods', :deterministic_uuids => false

prepare_react_native_project!

target 'LiveLawyerApp' do
  use_expo_modules!

  # ‚îÄ‚îÄ‚îÄ React Native autolinking config ‚îÄ‚îÄ‚îÄ
  if ENV['EXPO_USE_COMMUNITY_AUTOLINKING'] == '1'
    config_command = ['node', '-e', "process.argv=['', '', 'config'];require('@react-native-community/cli').run()"]
  else
    config_command = [
      'node',
      '--no-warnings',
      '--eval',
      "require(require.resolve('expo-modules-autolinking', { paths: [require.resolve('expo/package.json')] }))(process.argv.slice(1))",
      'react-native-config',
      '--json',
      '--platform',
      'ios'
    ]
  end
  config = use_native_modules!(config_command)

  # ‚îÄ‚îÄ‚îÄ Force static frameworks & disable bitcode at build settings ‚îÄ‚îÄ‚îÄ
  use_frameworks! :linkage => :static

  # ‚îÄ‚îÄ‚îÄ Standard React Native Pod install ‚îÄ‚îÄ‚îÄ
  use_react_native!(
    :path => config[:reactNativePath],
    :hermes_enabled => podfile_properties['expo.jsEngine'].nil? || podfile_properties['expo.jsEngine'] == 'hermes',
    :app_path => "#{Pod::Config.instance.installation_root}/..",
    :privacy_file_aggregation_enabled => podfile_properties['apple.privacyManifestAggregationEnabled'] != 'false',
  )

  post_install do |installer|
    # 1) RN post-install helper
    react_native_post_install(
      installer,
      config[:reactNativePath],
      :mac_catalyst_enabled => false,
      :ccache_enabled => podfile_properties['apple.ccacheEnabled'] == 'true',
    )

    # 2) Disable resource-bundle code signing (Xcode 14+)
    installer.target_installation_results.pod_target_installation_results.each do |_, result|
      result.resource_bundle_targets.each do |bundle_target|
        bundle_target.build_configurations.each do |c|
          c.build_settings['CODE_SIGNING_ALLOWED'] = 'NO'
        end
      end
    end

    # 3) Strip bitcode from every TwilioVideo.framework binary
    bitcode_strip = `xcrun --find bitcode_strip`.chomp
    if bitcode_strip.empty?
      puts "‚ö†Ô∏è  bitcode_strip tool not found, skipping bitcode strip"
    else
      pods_dir = File.join(__dir__, 'Pods')
      Dir.glob("#{pods_dir}/**/TwilioVideo.framework/**/TwilioVideo").each do |bin|
        puts "üîß Stripping bitcode from: #{bin}"
        system("#{bitcode_strip} #{bin} -r -o #{bin}")
      end
    end

    # 4) Force C++17 only on TwilioVideo targets
    installer.pods_project.targets.each do |pod_target|
      if pod_target.name.include?("TwilioVideo")
        pod_target.build_configurations.each do |cfg|
          cfg.build_settings['CLANG_CXX_LANGUAGE_STANDARD'] = 'c++17'
          puts "üîß Forcing C++17 on Pod target: #{pod_target.name}"
        end
      end
    end
  end
end
